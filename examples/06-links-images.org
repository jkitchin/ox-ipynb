#+TITLE: Links and Images
#+AUTHOR: ox-ipynb examples
#+DESCRIPTION: Demonstrates various link types and image embedding in Jupyter notebooks

* External Links

** Simple URLs

Direct URLs are automatically linked: https://www.python.org

You can also use explicit links: [[https://jupyter.org][Jupyter Project]]

** Named Links

Here's a link to [[https://orgmode.org][Org-mode documentation]] for reference.

Read more about [[https://numpy.org][NumPy]] and [[https://matplotlib.org][Matplotlib]].

* Internal Links

** Section References

You can reference other sections in the notebook using org-mode syntax:
- See [[*Notes on Image Handling]] below

** Footnotes and References

Standard org-mode footnote syntax[fn:1] works in markdown cells.

[fn:1] This is a footnote example.

* Images from Files


** Remote Images

Images from URLs:

[[https://jupyter.org/assets/homepage/main-logo.svg]]

* Images from Code

** Generating and Displaying Plots

#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt
import numpy as np

# Create a simple plot
x = np.linspace(0, 2*np.pi, 100)
y = np.sin(x)

plt.figure(figsize=(10, 4))
plt.plot(x, y, 'b-', linewidth=2)
plt.fill_between(x, 0, y, alpha=0.3)
plt.title('Sine Wave')
plt.xlabel('x')
plt.ylabel('sin(x)')
plt.grid(True, alpha=0.3)
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/5a29f28560b00940978454a850f02e0bc46be8d6.png]]

** Multiple Subplots

#+BEGIN_SRC jupyter-python
fig, axes = plt.subplots(2, 2, figsize=(10, 8))

# Plot 1: Sine
x = np.linspace(0, 4*np.pi, 100)
axes[0, 0].plot(x, np.sin(x))
axes[0, 0].set_title('Sine')
axes[0, 0].grid(True)

# Plot 2: Cosine
axes[0, 1].plot(x, np.cos(x), 'r')
axes[0, 1].set_title('Cosine')
axes[0, 1].grid(True)

# Plot 3: Tangent
axes[1, 0].plot(x, np.tan(x))
axes[1, 0].set_title('Tangent')
axes[1, 0].set_ylim(-5, 5)
axes[1, 0].grid(True)

# Plot 4: Exponential
axes[1, 1].plot(x, np.exp(-x/5), 'g')
axes[1, 1].set_title('Exponential Decay')
axes[1, 1].grid(True)

plt.tight_layout()
plt.show()
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/57a26cd38120f51043a4a317733a9362deed64c6.png]]

** Saving Plots to Files

#+BEGIN_SRC jupyter-python
# Create and save a plot
x = np.linspace(-3, 3, 100)
y = np.exp(-x**2)

plt.figure(figsize=(8, 5))
plt.plot(x, y, 'purple', linewidth=2)
plt.title('Gaussian Function')
plt.xlabel('x')
plt.ylabel('$e^{-x^2}$')
plt.grid(True, alpha=0.3)
plt.savefig('gaussian.png', dpi=150, bbox_inches='tight')
plt.close()

print("Plot saved to gaussian.png")
#+END_SRC

#+RESULTS:
: Plot saved to gaussian.png

The saved plot can then be referenced:

[[file:gaussian.png]]


* Images from Libraries

** Using PIL/Pillow

#+BEGIN_SRC jupyter-python
from PIL import Image, ImageDraw, ImageFont
import numpy as np

# Create an image programmatically
img = Image.new('RGB', (400, 200), color='lightblue')
draw = ImageDraw.Draw(img)

# Draw some shapes
draw.rectangle([50, 50, 150, 150], fill='red', outline='black', width=3)
draw.ellipse([200, 50, 350, 150], fill='green', outline='black', width=3)

# Display the image
img
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/1660ae3819586e3078697bb1a35ac21ac6aabb8d.jpg]]

** Array Images

#+BEGIN_SRC jupyter-python
# Create an image from a numpy array
gradient = np.linspace(0, 1, 256)
image_array = np.tile(gradient, (256, 1))

plt.figure(figsize=(8, 6))
plt.imshow(image_array, cmap='viridis', aspect='auto')
plt.colorbar(label='Intensity')
plt.title('Gradient Image from Array')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/a7e4922043a53415c9c4d4ce4ae5f067055878bb.png]]



* Inline Images vs File References

** Inline Display

Code cells that produce images will display them inline automatically:

#+BEGIN_SRC jupyter-python
# This displays inline automatically
plt.plot([1, 2, 4, 8, 16])
plt.title('Powers of 2');
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/4f19ba55d8ba847154865d8dc0f712e2bb923da7.png]]

** File References

Images saved to files need explicit references:

#+BEGIN_SRC jupyter-python
# Save without displaying
plt.plot([1, 3, 9, 27, 81])
plt.title('Powers of 3')
plt.savefig('powers.png')
plt.close()
#+END_SRC

#+RESULTS:

To display the saved image:

[[file:powers.png]]

* Notes on Image Handling

1. **Inline display**: Matplotlib automatically displays in Jupyter
2. **File references**: Use org-mode link syntax
3. **Remote images**: Full URLs work in notebooks
4. **Image formats**: PNG, JPG, SVG commonly supported
5. **Size control**: Use HTML attributes for sizing
6. **Vector graphics**: SVG for scalable images

For best results:
- Use PNG for screenshots and plots
- Use JPG for photographs
- Use SVG for diagrams and vector graphics
- Set appropriate DPI when saving (typically 150-300)
